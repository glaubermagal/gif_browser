import styles from "@/styles/Home.module.css";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useEffect, useState } from "react";
import gifs from "../helpers/api/gifs";
import useSWR from 'swr';


const inter = Inter({ subsets: ["latin"] });
const fetcher = (...args: any) => fetch(...args).then((res) => res.json());

export default function Home() {
  const [query, setQuery] = useState<string>('');
  const [gifList, setGifList] = useState<any[]>([]);
  const [page, setPage] = useState<number>(1);
  const [loading, setLoading] = useState<boolean>(false);
  const [itemsPerPage, setItemsPerPage] = useState<number>(12);
  const [maximumNumberOfPages, setMaximumNumberOfPages] = useState<number>();

  const { data: history } = useSWR(
    `/api/gif/history?query=${query}&offset=${(page - 1) * itemsPerPage}&limit=${itemsPerPage}`,
    fetcher
  );

  const executeSearch = async () => {
    setLoading(true);
    const gifResults = await gifs.search({ 
      q: query,
      offset: (page - 1) * itemsPerPage, 
      limit: itemsPerPage
    });

    console.log(gifResults);
    setMaximumNumberOfPages(gifResults?.pagination.total_count / itemsPerPage)

    setGifList(gifResults?.data);
    setLoading(false);
  }

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    executeSearch();
  };

  useEffect(() => {
    executeSearch();
  }, [page, itemsPerPage])

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const handleItemsPerPageChange = (newItemsPerPage: number) => {
    setItemsPerPage(newItemsPerPage);
    setPage(1);
  };

  return (
    <>
      <Head>
        <title>GIF Browser</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.content}>
          <h1>Search for GIFs</h1>

          <form onSubmit={handleSearch} className={styles.searchForm}>
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Enter your search query"
            />
            <button type="submit">Search</button>
          </form>

          {loading && <div className={styles.loadingMessage}>Loading...</div>}

          {!loading && gifList?.length > 0 && (
            <div>
              <div className={styles.searchContainer}>
                {gifList.map((gif) => (
                  <img className={styles.gif} key={gif.id} src={gif.images.original.url} />
                ))}
              </div>

              <div className={styles.paginationButtons}>
                <button disabled={page === 1} onClick={() => handlePageChange(page - 1)}>
                  Previous
                </button>
                <span style={{ margin: '10px' }}>Page {page}</span>
                <button disabled={page === maximumNumberOfPages} onClick={() => handlePageChange(page + 1)}>
                  Next
                </button>

                <span style={{ margin: '10px' }}>Items per page:</span>
                <select value={itemsPerPage} onChange={(e) => handleItemsPerPageChange(Number(e.target.value))} className={styles.itemsPerPageSelector}>
                  <option value={12}>12</option>
                  <option value={24}>24</option>
                  <option value={36}>36</option>
                </select>
              </div>
            </div>
          )}

          {!loading && gifList?.length === 0 && (
            <div>
              not found
            </div>
          )}
        </div>

        <div className={styles.grid}></div>
      </main>
    </>
  );
}
